import time
import tkinter as tk
from tkinter import ttk
import tkinter.messagebox as mbox
from tkinter import filedialog
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException
from webdriver_manager.chrome import ChromeDriverManager
import datetime
import openpyxl

# --- Bi·∫øn driver to√†n c·ª•c ---
browser = None
delete_buttons = []
dang_xoa_hs_trung = False
dong_test_hien_tai = None  # l∆∞u d√≤ng hi·ªán t·∫°i khi test
dang_xoa_hs_7980 = False
dong_hien_tai_7980 = None  # D√≤ng hi·ªán t·∫°i ƒë·ªÉ duy·ªát danh s√°ch 7980


# --- H√†m kh·ªüi ƒë·ªông Chrome v√† ƒëi·ªÅn th√¥ng tin t·ª± ƒë·ªông ---
def launchBrowser():
    browser = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
    browser.get("https://gdbhyt.baohiemxahoi.gov.vn/")
    
    try:
        # ƒê·ª£i v√† nh·∫≠p v√†o tr∆∞·ªùng "macskcb"
        WebDriverWait(browser, 15).until(
            EC.presence_of_element_located((By.ID, "macskcb"))
        ).send_keys("01820")

        # Nh·∫≠p v√†o "username"
        WebDriverWait(browser, 10).until(
            EC.presence_of_element_located((By.ID, "username"))
        ).send_keys("001194021054")

        # Nh·∫≠p v√†o "password"
        WebDriverWait(browser, 10).until(
            EC.presence_of_element_located((By.ID, "password"))
        ).send_keys("Donggiahuy@123")

        # ‚úÖ Focus v√†o √¥ Captcha (d√≤ng b·∫°n c·∫ßn)
        WebDriverWait(browser, 5).until(
            EC.presence_of_element_located((By.ID, "Captcha_TB_I"))
        )
        browser.execute_script("document.getElementById('Captcha_TB_I').focus();")

    except TimeoutException:
        print("Kh√¥ng t√¨m th·∫•y ƒë·ªß c√°c tr∆∞·ªùng nh·∫≠p sau 15 gi√¢y.")
    
    return browser


# --- Giao di·ªán GUI ---
root = tk.Tk()
root.title("T·ª± ƒë·ªông h√≥a c·ªïng b·∫£o hi·ªÉm")
root.geometry("800x650")

# H√†m ghi log
def ghi_log(message):
    text_box.config(state='normal')
    text_box.insert(tk.END, message + "\n")
    text_box.see(tk.END)  # T·ª± ƒë·ªông cu·ªôn xu·ªëng d√≤ng cu·ªëi
    text_box.config(state='disabled')

# --- H√†m m·ªü tr√¨nh duy·ªát ---
def mo_chrome():
    global browser
    try:
        browser = launchBrowser()
        if browser:
            ghi_log("‚úÖ Nh·∫≠p Captcha v√† b·∫•m 'ƒêƒÉng nh·∫≠p' th·ªß c√¥ng.")
        else:
            ghi_log("‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông tr√¨nh duy·ªát.")
    except WebDriverException as e:
        ghi_log(f"‚ùå L·ªói khi m·ªü Chrome: {e}")



# --- H√†m chung ƒë·ªÉ ch·ªçn menu v√† l·∫•y danh s√°ch h·ªì s∆° ---
def lay_danh_sach_ho_so(menu_ids, combobox_ids, output_var_name, ten_ho_so):
    global browser
    if browser is None:
        status_label.config(text="‚ö†Ô∏è B·∫°n c·∫ßn m·ªü tr√¨nh duy·ªát tr∆∞·ªõc!", fg="orange")
        return

    try:
        # 1. ƒê√≥ng popup phi√™n b·∫£n n·∫øu c√≥
        try:
            popup = browser.find_element(By.ID, "popupInfoVersion_PW-1")
            if popup.is_displayed():
                browser.find_element(By.ID, "popupInfoVersion_HCB-1").click()
                time.sleep(0.5)
        except:
            pass  # Kh√¥ng c√≥ popup th√¨ b·ªè qua

        # 2. Click l·∫ßn l∆∞·ª£t c√°c menu theo ID
        for menu_id in menu_ids:
            WebDriverWait(browser, 10).until(
                EC.element_to_be_clickable((By.ID, menu_id))
            ).click()

        # 3. Ch·ªçn c√°c gi√° tr·ªã trong combobox l·ªçc
        for combo_id, item_id in combobox_ids:
            WebDriverWait(browser, 10).until(
                EC.element_to_be_clickable((By.ID, combo_id))
            ).click()
            WebDriverWait(browser, 5).until(
                EC.element_to_be_clickable((By.ID, item_id))
            ).click()

        # 4. Ch·ªçn th√°ng t·ª´ Combobox giao di·ªán ng∆∞·ªùi d√πng
        thang_chon = combo_thang.get()                     # V√≠ d·ª•: "Th√°ng 7"
        so_thang = int(thang_chon.split()[-1])             # L·∫•y s·ªë 7
        index_thang = so_thang - 1                         # Index = 6

        WebDriverWait(browser, 10).until(
            EC.element_to_be_clickable((By.ID, "cbx_thang_I"))
        ).click()
        WebDriverWait(browser, 5).until(
            EC.element_to_be_clickable((By.ID, f"cbx_thang_DDD_L_LBI{index_thang}T0"))
        ).click()

        # 5. B·∫•m n√∫t T√¨m ki·∫øm
        WebDriverWait(browser, 10).until(
            EC.element_to_be_clickable((By.ID, "bt_TimKiem"))
        ).click()

        # 6. L·∫•y k·∫øt qu·∫£ t·ªïng s·ªë h·ªì s∆°
        summary_element = WebDriverWait(browser, 10).until(
            EC.visibility_of_element_located((By.CLASS_NAME, "dxp-summary"))
        )
        summary_text = summary_element.text  # V√≠ d·ª•: "Page 1 of 18 (348 items)"

        import re
        match = re.search(r"\((\d+)\s+items\)", summary_text)
        count = int(match.group(1)) if match else 0

        # 7. G√°n bi·∫øn to√†n c·ª•c theo t√™n output_var_name
        globals()[output_var_name] = count

        # 8. Ghi log k·∫øt qu·∫£
        ghi_log(f"‚úÖ ƒê√£ l·∫•y ƒë∆∞·ª£c {count} h·ªì s∆° {ten_ho_so}")

    except Exception as e:
        status_label.config(
            text=f"‚ùå L·ªói khi x·ª≠ l√Ω: {e}",
            fg="red"
        )




# Load h·ªì s∆° tr√πng
def load_ho_so_trung():
    menu_ids = [
        "HeaderMenu_DXI2_T",         # üß≠ Menu c·∫•p 1: "H·ªì s∆° ƒë·ªÅ ngh·ªã thanh to√°n"
        "HeaderMenu_DXI2i0_T",       # üìÑ Menu c·∫•p 2: "H·ªì s∆° XML"
        "HeaderMenu_DXI2i0i2_T",     # üìã Menu c·∫•p 3: "Danh s√°ch ƒë·ªÅ ngh·ªã thanh to√°n"
    ]
    combobox_ids = [
        ("cb_TrangThaiHS_I", "cb_TrangThaiHS_DDD_L_LBI2T0"),  # ‚úÖ Tr·∫°ng th√°i h·ªì s∆°: "H·ªì s∆° tr√πng"
        ("cb_TrangThaiTT_I", "cb_TrangThaiTT_DDD_L_LBI0T0"),  # üí∞ Tr·∫°ng th√°i thanh to√°n: "T·∫•t c·∫£"
    ]
    lay_danh_sach_ho_so(menu_ids, combobox_ids, "so_ho_so_trung", "tr√πng")



# Load h·ªì s∆° 7980
def load_ho_so_7980():
    menu_ids = [
        "HeaderMenu_DXI2_T",         # üß≠ Menu c·∫•p 1: "H·ªì s∆° ƒë·ªÅ ngh·ªã thanh to√°n"
        "HeaderMenu_DXI2i1_T",       # üìÅ Menu c·∫•p 2: "H·ªì s∆° 7980"
        "HeaderMenu_DXI2i1i2_",     # üìã Menu c·∫•p 3: "Danh s√°ch ƒë·ªÅ ngh·ªã thanh to√°n 7980a"
    ]
    combobox_ids = [
        ("cb_TrangThaiHS_I", "cb_TrangThaiHS_DDD_L_LBI0T0"),  # ‚úÖ Tr·∫°ng th√°i h·ªì s∆°: "T·∫•t c·∫£"
        ("cb_TrangThaiTT_I", "cb_TrangThaiTT_DDD_L_LBI0T0"),  # üí∞ Tr·∫°ng th√°i thanh to√°n: "T·∫•t c·∫£"
    ]
    lay_danh_sach_ho_so(menu_ids, combobox_ids, "so_ho_so_7980", "7980")








# X√≥a h·ªì s∆° tr√πng
def xoa_danh_sach_ho_so_trung():
    global so_ho_so_trung, dang_xoa_hs_trung

    if not so_ho_so_trung or so_ho_so_trung <= 0:
        ghi_log("‚ö†Ô∏è Kh√¥ng c√≥ h·ªì s∆° tr√πng ƒë·ªÉ x√≥a. Vui l√≤ng b·∫•m 'OK' tr∆∞·ªõc.")
        return

    if not dang_xoa_hs_trung:
        return  # N·∫øu kh√¥ng ·ªü ch·∫ø ƒë·ªô x√≥a, tho√°t

    def xoa_tung_ho_so(i):
        global dang_xoa_hs_trung

        if i >= so_ho_so_trung:
            mbox.showinfo("Ho√†n th√†nh", "‚úÖ ƒê√£ x√≥a h·∫øt t·∫•t c·∫£ c√°c h·ªì s∆°.")
            ghi_log("‚úÖ ƒê√£ x√≥a xong to√†n b·ªô h·ªì s∆° tr√πng.")
            btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")
            dang_xoa_hs_trung = False
            return

        if not dang_xoa_hs_trung:
            ghi_log("‚èπÔ∏è ƒê√£ d·ª´ng thao t√°c x√≥a theo y√™u c·∫ßu.")
            btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")
            return

        try:
            # L·∫•y d√≤ng ƒë·∫ßu ti√™n v√† icon x√≥a
            row = WebDriverWait(browser, 5).until(
                EC.presence_of_element_located((By.XPATH, "//tr[contains(@id, 'gvDanhSachHoSo_DXDataRow')]"))
            )
            cols = row.find_elements(By.TAG_NAME, "td")
            ho_ten = cols[8].text.strip() if len(cols) > 8 else "Kh√¥ng r√µ t√™n"
            icon_xoa = cols[26].find_element(By.TAG_NAME, "img")

            # Click icon x√≥a
            browser.execute_script("arguments[0].click();", icon_xoa)
            ghi_log(f"üóëÔ∏è ƒê√£ x√≥a h·ªì s∆°: {ho_ten}")

            # ƒê·ª£i popup x√°c nh·∫≠n x√≥a v√† click n√∫t "C√≥"
            WebDriverWait(browser, 5).until(
                EC.visibility_of_element_located((By.ID, "PopupThongBaoXoa_PWH-1"))
            )
            btn_co = WebDriverWait(browser, 3).until(
                EC.element_to_be_clickable((By.ID, "btnCo"))
            )
            btn_co.click()

            # ƒê·ª£i popup th√¥ng b√°o th√†nh c√¥ng v√† ƒë√≥ng l·∫°i
            WebDriverWait(browser, 5).until(
                EC.visibility_of_element_located((By.ID, "popup_message_PW-1"))
            )
            btn_dong_thong_bao = WebDriverWait(browser, 3).until(
                EC.element_to_be_clickable((By.ID, "popup_message_HCB-1"))
            )
            btn_dong_thong_bao.click()

        except Exception as e:
            ghi_log(f"‚ùå L·ªói khi x√≥a d√≤ng {i+1}: {e}")

        # Ti·∫øp t·ª•c sau m·ªôt ch√∫t delay
        root.after(700, lambda: xoa_tung_ho_so(i + 1))

    xoa_tung_ho_so(0)




def toggle_xoa_ho_so_trung():
    global dang_xoa_hs_trung

    if not dang_xoa_hs_trung:
        # B·∫Øt ƒë·∫ßu x√≥a
        dang_xoa_hs_trung = True
        btn_delete_hs_trung.config(text="‚èπÔ∏è D·ª´ng")
        xoa_danh_sach_ho_so_trung()
    else:
        # D·ª´ng thao t√°c x√≥a
        dang_xoa_hs_trung = False
        btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")








# H√†m ƒë·ªÉ ch·ªçn file Excel
def chon_file_excel():
    global dong_test_hien_tai
    file_path = filedialog.askopenfilename(
        filetypes=[("Excel files", "*.xlsx *.xls")],
        title="Ch·ªçn file Excel"
    )
    if file_path:
        entry_file_path.delete(0, tk.END)
        entry_file_path.insert(0, file_path)
        dong_test_hien_tai = None  # Reset d√≤ng test
        ghi_log(f"üìÇ ƒê√£ ch·ªçn file: {file_path}")

# Test file excel
def test_in_thong_tin_excel():
    global dong_test_hien_tai

    ma_the_col = combo_mt.get().strip().upper()
    ho_ten_col = combo_ht.get().strip().upper()
    ngay_vao_col = combo_nv.get().strip().upper()
    ngay_ra_col = combo_nr.get().strip().upper()

    file_path = entry_file_path.get().strip()
    if not file_path:
        ghi_log("‚ùå Ch∆∞a ch·ªçn file Excel.")
        return

    try:
        wb = openpyxl.load_workbook(file_path)
        ws = wb.active
    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi m·ªü file Excel: {e}")
        return

    try:
        start = int(entry_start.get().strip())
        end = int(entry_end.get().strip())
    except ValueError:
        ghi_log("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n cho d√≤ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.")
        return

    if dong_test_hien_tai is None:
        dong_test_hien_tai = start

    if dong_test_hien_tai > end:
        ghi_log("‚úÖ ƒê√£ test ƒë·∫øn d√≤ng cu·ªëi c√πng.")
        return

    try:
        ma_the_val = ws[f"{ma_the_col}{dong_test_hien_tai}"].value
        ho_ten_val = ws[f"{ho_ten_col}{dong_test_hien_tai}"].value
        ngay_vao_val = ws[f"{ngay_vao_col}{dong_test_hien_tai}"].value
        ngay_ra_val = ws[f"{ngay_ra_col}{dong_test_hien_tai}"].value

        # G·ªôp th√¥ng tin th√†nh 1 d√≤ng log
        log_line = f"{dong_test_hien_tai}: {ma_the_val} | {ho_ten_val} | {ngay_vao_val} | {ngay_ra_val}"
        ghi_log(log_line)

    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi ƒë·ªçc d√≤ng {dong_test_hien_tai}: {e}")

    dong_test_hien_tai += 1


# Duy·ªát qua danh s√°ch excel, t√¨m ki·∫øm, so s√°nh v√† x√≥a h·ªì s∆° 7980
def xoa_ho_so_7980():
    global dong_hien_tai, dang_xoa_hs_7980

    if not dang_xoa_hs_7980:
        # B·∫Øt ƒë·∫ßu ti·∫øn tr√¨nh xo√°
        btn_delete_hs_7980.config(text="‚èπÔ∏è D·ª´ng x√≥a")
        ghi_log("üöÄ B·∫Øt ƒë·∫ßu xo√° h·ªì s∆° 79/80...")
        dong_hien_tai = None
        dang_xoa_hs_7980 = True
        xoa_tiep_dong_7980()
    else:
        # D·ª´ng ti·∫øn tr√¨nh xo√°
        dang_xoa_hs_7980 = False
        btn_delete_hs_7980.config(text="X√≥a HS 79/80")
        ghi_log("‚èπÔ∏è ƒê√£ d·ª´ng xo√° theo y√™u c·∫ßu.")

def xoa_tiep_dong_7980():
    global dong_hien_tai, dang_xoa_hs_7980

    if not dang_xoa_hs_7980:
        return

    # --- ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel ---
    file_path = entry_file_path.get().strip()
    if not file_path:
        ghi_log("‚ùå Ch∆∞a ch·ªçn file Excel.")
        return

    try:
        wb = openpyxl.load_workbook(file_path)
        ws = wb.active
    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi m·ªü file Excel: {e}")
        return

    try:
        start = int(entry_start.get().strip())
        end = int(entry_end.get().strip())
    except ValueError:
        ghi_log("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n cho d√≤ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.")
        return

    if dong_hien_tai is None:
        dong_hien_tai = start

    if dong_hien_tai > end:
        ghi_log("‚úÖ ƒê√£ duy·ªát h·∫øt t·∫•t c·∫£ c√°c d√≤ng.")
        btn_delete_hs_7980.config(text="X√≥a HS 79/80")
        dang_xoa_hs_7980 = False
        return

    try:
        # --- L·∫•y d·ªØ li·ªáu t·ª´ d√≤ng hi·ªán t·∫°i ---
        ma_the_col = combo_mt.get().strip().upper()
        ho_ten_col = combo_ht.get().strip().upper()
        ngay_vao_col = combo_nv.get().strip().upper()
        ngay_ra_col = combo_nr.get().strip().upper()

        ma_the_val = ws[f"{ma_the_col}{dong_hien_tai}"].value
        ho_ten_val = str(ws[f"{ho_ten_col}{dong_hien_tai}"].value).strip()
        ngay_vao_val = str(ws[f"{ngay_vao_col}{dong_hien_tai}"].value).strip()
        ngay_ra_val = str(ws[f"{ngay_ra_col}{dong_hien_tai}"].value).strip()

        if not ma_the_val:
            ghi_log(f"{dong_hien_tai}: ‚ö†Ô∏è Kh√¥ng c√≥ m√£ th·∫ª. B·ªè qua.")
            dong_hien_tai += 1
            root.after(500, xoa_tiep_dong_7980)
            return

        # --- T√¨m l·∫°i input m·ªói l·∫ßn ƒë·ªÉ tr√°nh stale element ---
        input_box = WebDriverWait(browser, 5).until(
            EC.presence_of_element_located((By.ID, "gvDanhSachBHYT7980_DXFREditorcol3_I"))
        )

        # --- X√≥a d·ªØ li·ªáu c≈© trong input m√£ th·∫ª ---
        input_box.clear()

        # --- Ch·ªù loading sau khi clear input ---
        try:
            WebDriverWait(browser, 5).until_not(
                EC.presence_of_element_located((By.CLASS_NAME, "dxgvLoadingDiv_EIS"))
            )
        except:
            pass

        # --- T√¨m l·∫°i input box l·∫ßn n·ªØa tr∆∞·ªõc khi nh·∫≠p m√£ th·∫ª ---
        input_box = WebDriverWait(browser, 5).until(
            EC.presence_of_element_located((By.ID, "gvDanhSachBHYT7980_DXFREditorcol3_I"))
        )
        input_box.send_keys(str(ma_the_val))

        # --- Ch·ªù loading sau khi nh·∫≠p m√£ th·∫ª ---
        try:
            WebDriverWait(browser, 5).until_not(
                EC.presence_of_element_located((By.CLASS_NAME, "dxgvLoadingDiv_EIS"))
            )
        except:
            pass

        # --- T√¨m danh s√°ch k·∫øt qu·∫£ ---
        rows = browser.find_elements(By.XPATH, "//tr[starts-with(@id, 'gvDanhSachBHYT7980_DXDataRow')]")
        found = False

        for row in rows:
            cols = row.find_elements(By.TAG_NAME, "td")
            if len(cols) >= 19:
                ho_ten = cols[5].text.strip()
                ngay_vao = cols[8].text.strip().replace(" SA", "").replace(" CH", "")
                ngay_ra = cols[9].text.strip().replace(" SA", "").replace(" CH", "")

                if ho_ten == ho_ten_val and ngay_vao == ngay_vao_val and ngay_ra == ngay_ra_val:
                    try:
                        # üîÑ T√¨m l·∫°i c·ªôt tr∆∞·ªõc khi b·∫•m xo√°
                        cols = row.find_elements(By.TAG_NAME, "td")
                        delete_btn = cols[18].find_element(By.TAG_NAME, "input")

                        browser.execute_script("arguments[0].click();", delete_btn)

                        # ‚è≥ Ch·ªù popup x√°c nh·∫≠n x√≥a hi·ªán ra
                        WebDriverWait(browser, 5).until(
                            EC.visibility_of_element_located((By.ID, "PopupThongBaoXoa_PWH-1"))
                        )

                        # ‚úÖ T·ª± ƒë·ªông b·∫•m v√†o n√∫t "Kh√¥ng"
                        btn_khong = WebDriverWait(browser, 3).until(
                            EC.element_to_be_clickable((By.ID, "btnKhong_CD"))
                        )
                        btn_khong.click()

                        ghi_log(f"{dong_hien_tai}: üóëÔ∏è ƒê√£ xo√°: {ho_ten}")
                        found = True
                        break
                    except Exception as e:
                        ghi_log(f"{dong_hien_tai}: ‚ùå Kh√¥ng th·ªÉ xo√°: {e}")

        if not found:
            ghi_log(f"{dong_hien_tai}: ‚ùå Kh√¥ng t√¨m th·∫•y h·ªì s∆° ph√π h·ª£p ƒë·ªÉ xo√°.")

    except Exception as e:
        ghi_log(f"{dong_hien_tai}: ‚ùå L·ªói: {e}")

    dong_hien_tai += 1
    root.after(700, xoa_tiep_dong_7980)


























# --- N√∫t ƒêƒÉng nh·∫≠p cƒÉn gi·ªØa ---
btn_login = tk.Button(root, text="ƒêƒÉng nh·∫≠p c·ªïng b·∫£o hi·ªÉm", font=("Arial", 12), command=mo_chrome)
btn_login.pack(pady=10)

import datetime

# L·∫•y th√°ng hi·ªán t·∫°i c·ªßa h·ªá th·ªëng ƒë·ªÉ truy·ªÅn v√†o combobox
thang_hien_tai = datetime.datetime.now().month
index_mac_dinh = thang_hien_tai - 1  # V√¨ Combobox index b·∫Øt ƒë·∫ßu t·ª´ 0

# --- Combobox ch·ªçn th√°ng ---
selected_thang = tk.StringVar()
combo_thang = ttk.Combobox(root, textvariable=selected_thang, font=("Arial", 11), width=10, state="readonly")
combo_thang['values'] = [f"Th√°ng {i}" for i in range(1, 13)]
combo_thang.current(index_mac_dinh)
combo_thang.pack(pady=5)


# --- Frame ch·ª©a 2 c·ªôt, KH√îNG khung vi·ªÅn ---
button_frame = tk.Frame(root)
button_frame.pack(pady=10)

# --- C·ªôt tr√°i: H·ªì s∆° tr√πng ---
left_column = tk.LabelFrame(button_frame, text="H·ªì s∆° tr√πng", font=("Arial", 10, "bold"), bd=2, relief="groove", padx=10, pady=10)
left_column.pack(side="left", padx=20)

btn_load_hs_trung = tk.Button(left_column, text="Load h·ªì s∆° tr√πng", font=("Arial", 12), command=load_ho_so_trung)
btn_load_hs_trung.pack(pady=5)

btn_delete_hs_trung = tk.Button(left_column, text="X√≥a HS Tr√πng", font=("Arial", 12), command=toggle_xoa_ho_so_trung)
btn_delete_hs_trung.pack(pady=5)

# --- C·ªôt ph·∫£i: H·ªì s∆° 79/80 ---
right_column = tk.LabelFrame(button_frame, text="H·ªì s∆° 79/80", font=("Arial", 10, "bold"), bd=2, relief="groove", padx=10, pady=10)
right_column.pack(side="left", padx=20)

btn_load_hs_7980 = tk.Button(right_column, text="Load h·ªì s∆° 79/80", font=("Arial", 12), command=load_ho_so_7980)
btn_load_hs_7980.pack(pady=5)

# --- D√≤ng ch·ªçn file Excel ---
file_select_frame = tk.Frame(right_column)
file_select_frame.pack(pady=5)

entry_file_path = tk.Entry(file_select_frame, width=25, font=("Arial", 10))
entry_file_path.pack(side="left", padx=5)

btn_browse_file = tk.Button(file_select_frame, text="Ch·ªçn file", command=chon_file_excel)
btn_browse_file.pack(side="left")

# --- D√≤ng ch·ªçn c·ªôt t·ª´ Excel ---
column_select_frame = tk.Frame(right_column)
column_select_frame.pack(pady=5)

# Danh s√°ch ch·ªØ c√°i A-Z
chu_cai_list = [chr(i) for i in range(65, 91)]  # T·ª´ 'A' ƒë·∫øn 'Z'

# T·∫°o t·ª´ng nh√£n v√† combobox
label_mt = tk.Label(column_select_frame, text="M√£ th·∫ª")
label_mt.pack(side="left", padx=2)
combo_mt = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_mt.pack(side="left", padx=2)

label_ht = tk.Label(column_select_frame, text="H·ªç t√™n")
label_ht.pack(side="left", padx=2)
combo_ht = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_ht.pack(side="left", padx=2)

label_nv = tk.Label(column_select_frame, text="Ng√†y v√†o")
label_nv.pack(side="left", padx=2)
combo_nv = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_nv.pack(side="left", padx=2)

label_nr = tk.Label(column_select_frame, text="Ng√†y ra")
label_nr.pack(side="left", padx=2)
combo_nr = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_nr.pack(side="left", padx=2)

# --- H√†ng nh·∫≠p d√≤ng b·∫Øt ƒë·∫ßu / k·∫øt th√∫c ---
row_range_frame = tk.Frame(right_column)
row_range_frame.pack(pady=5)

# Nh√£n v√† input: D√≤ng b·∫Øt ƒë·∫ßu
label_start = tk.Label(row_range_frame, text="D√≤ng b·∫Øt ƒë·∫ßu")
label_start.pack(side="left", padx=2)
entry_start = tk.Entry(row_range_frame, width=6)
entry_start.pack(side="left", padx=2)

# Nh√£n v√† input: D√≤ng k·∫øt th√∫c
label_end = tk.Label(row_range_frame, text="D√≤ng k·∫øt th√∫c")
label_end.pack(side="left", padx=2)
entry_end = tk.Entry(row_range_frame, width=6)
entry_end.pack(side="left", padx=2)

# N√∫t Test
btn_test_range = tk.Button(row_range_frame, text="Test", command=test_in_thong_tin_excel)
btn_test_range.pack(side="left", padx=5)


btn_delete_hs_7980 = tk.Button(right_column, text="X√≥a HS 79/80", font=("Arial", 12), command=xoa_ho_so_7980)
btn_delete_hs_7980.pack(pady=5)

# --- Status v√† Text Box ---
status_label = tk.Label(root, text="", font=("Arial", 10))
status_label.pack()

text_box = tk.Text(root, height=25, font=("Arial", 11))
text_box.pack(padx=10, pady=10, fill="both")
text_box.config(state='disabled')

root.mainloop()
