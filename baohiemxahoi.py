import time
import tkinter as tk
from tkinter import ttk
from tkinter import Toplevel, Label, Entry, Button, messagebox
import tkinter.messagebox as mbox
from tkinter import filedialog
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import datetime
import openpyxl
import re
import sys
import os
import csv

# --- Bi·∫øn driver to√†n c·ª•c ---
browser = None
delete_buttons = []
dang_xoa_hs_trung = False
dong_test_hien_tai = None  # l∆∞u d√≤ng hi·ªán t·∫°i khi test
dang_xoa_hs_7980 = False
dong_hien_tai_7980 = None  # D√≤ng hi·ªán t·∫°i ƒë·ªÉ duy·ªát danh s√°ch 7980
ws_excel_7980 = None



# --- H√†m kh·ªüi ƒë·ªông Chrome v√† ƒëi·ªÅn th√¥ng tin t·ª± ƒë·ªông ---
def launchBrowser():
    chrome_options = Options()
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-background-timer-throttling")
    chrome_options.add_argument("--disable-backgrounding-occluded-windows")
    chrome_options.add_argument("--disable-renderer-backgrounding")

    browser = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
    browser.get("https://gdbhyt.baohiemxahoi.gov.vn/")

    # ‚úÖ L·∫•y th√¥ng tin t·ª´ file login.csv
    ma_cs, username, password = doc_thong_tin_dang_nhap()

    try:
        WebDriverWait(browser, 15).until(
            EC.presence_of_element_located((By.ID, "macskcb"))
        ).send_keys(ma_cs)

        WebDriverWait(browser, 10).until(
            EC.presence_of_element_located((By.ID, "username"))
        ).send_keys(username)

        WebDriverWait(browser, 10).until(
            EC.presence_of_element_located((By.ID, "password"))
        ).send_keys(password)

        WebDriverWait(browser, 5).until(
            EC.presence_of_element_located((By.ID, "Captcha_TB_I"))
        )
        browser.execute_script("document.getElementById('Captcha_TB_I').focus();")

    except TimeoutException:
        print("Kh√¥ng t√¨m th·∫•y ƒë·ªß c√°c tr∆∞·ªùng nh·∫≠p sau 15 gi√¢y.")

    return browser


# ƒê·ªçc th√¥ng tin t·ª´ file csv
def doc_thong_tin_dang_nhap():
    filepath = get_login_file_path()
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                return (
                    row.get("ma_co_so", ""),
                    row.get("ten_dang_nhap", ""),
                    row.get("mat_khau", "")
                )
    return "", "", ""


# H√†m ƒë·ªÉ t√¨m ƒë∆∞·ªùng d·∫´n file login.csv tr√°nh tr∆∞·ªùng h·ª£p b√°o l·ªói khi ch·∫°y file exe
def get_login_file_path():
    import sys
    if getattr(sys, 'frozen', False):
        return os.path.join(os.path.dirname(sys.executable), "login.csv")
    else:
        return os.path.join(os.path.abspath("."), "login.csv")




# --- Giao di·ªán GUI ---
def resource_path(relative_path):
    """L·∫•y ƒë∆∞·ªùng d·∫´n th·ª±c khi ch·∫°y file EXE ho·∫∑c khi ch·∫°y script tr·ª±c ti·∫øp"""
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.abspath(relative_path)

root = tk.Tk()
root.iconbitmap(resource_path("icon.ico"))

root.title("T·ª± ƒë·ªông x√≥a c·ªïng b·∫£o hi·ªÉm")
root.geometry("450x700")





# H√†m ghi log
def ghi_log(message):
    text_box.config(state='normal')
    text_box.insert(tk.END, message + "\n")
    text_box.see(tk.END)  # T·ª± ƒë·ªông cu·ªôn xu·ªëng d√≤ng cu·ªëi
    text_box.config(state='disabled')

# --- H√†m m·ªü tr√¨nh duy·ªát ---
def mo_chrome():
    global browser

    btn_login.config(state="disabled")  # ‚ùå T·∫°m v√¥ hi·ªáu h√≥a n√∫t
    status_label.config(text="ƒêang kh·ªüi ƒë·ªông tr√¨nh duy·ªát...", fg="blue")
    root.update()  # ‚úÖ C·∫≠p nh·∫≠t giao di·ªán ngay l·∫≠p t·ª©c

    try:
        browser = launchBrowser()
        if browser:
            status_label.config(text="‚úÖ H√£y nh·∫≠p Captcha v√† b·∫•m 'ƒêƒÉng nh·∫≠p' th·ªß c√¥ng.", fg="green")
        else:
            status_label.config(text="‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông tr√¨nh duy·ªát.", fg="red")
    except WebDriverException as e:
        status_label.config(text="‚ùå L·ªói khi m·ªü Chrome", fg="red")
    
    btn_login.config(state="normal")  # ‚úÖ B·∫≠t l·∫°i n√∫t sau khi xong




# --- H√†m chung ƒë·ªÉ ch·ªçn menu v√† l·∫•y danh s√°ch h·ªì s∆° ---
def lay_danh_sach_ho_so(menu_ids, combobox_ids, output_var_name, ten_ho_so):
    global browser
    if browser is None:
        status_label.config(text="‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p c·ªïng b·∫£o hi·ªÉm", fg="orange")
        return
    
    # üü¶ Th√¥ng b√°o ƒëang x·ª≠ l√Ω
    btn_load_hs_trung.config(state="disabled")  # ‚ùå T·∫°m v√¥ hi·ªáu h√≥a n√∫t
    btn_load_hs_7980.config(state="disabled")  # ‚ùå T·∫°m v√¥ hi·ªáu h√≥a n√∫t
    status_label.config(text=f"‚è≥ ƒêang load danh s√°ch h·ªì s∆° {ten_ho_so}...", fg="blue")
    root.update()  # ‚úÖ C·∫≠p nh·∫≠t giao di·ªán ngay l·∫≠p t·ª©c

    try:
        # 1. ƒê√≥ng popup phi√™n b·∫£n n·∫øu c√≥
        try:
            popup = browser.find_element(By.ID, "popupInfoVersion_PW-1")
            if popup.is_displayed():
                browser.find_element(By.ID, "popupInfoVersion_HCB-1").click()
                time.sleep(0.5)
        except:
            pass  # Kh√¥ng c√≥ popup th√¨ b·ªè qua

        # 2. Click l·∫ßn l∆∞·ª£t c√°c menu theo ID
        for menu_id in menu_ids:
            WebDriverWait(browser, 10).until(
                EC.element_to_be_clickable((By.ID, menu_id))
            ).click()

        # 3. Ch·ªçn c√°c gi√° tr·ªã trong combobox l·ªçc
        for combo_id, item_id in combobox_ids:
            WebDriverWait(browser, 10).until(
                EC.element_to_be_clickable((By.ID, combo_id))
            ).click()
            WebDriverWait(browser, 5).until(
                EC.element_to_be_clickable((By.ID, item_id))
            ).click()



        # # 4. Ch·ªçn th√°ng t·ª´ Combobox giao di·ªán ng∆∞·ªùi d√πng
        # thang_chon = combo_thang.get()                     # V√≠ d·ª•: "Th√°ng 7"
        # so_thang = int(thang_chon.split()[-1])             # L·∫•y s·ªë 7
        # index_thang = so_thang - 1                         # Index = 6

        # WebDriverWait(browser, 10).until(
        #     EC.element_to_be_clickable((By.ID, "cbx_thang_I"))
        # ).click()
        # WebDriverWait(browser, 5).until(
        #     EC.element_to_be_clickable((By.ID, f"cbx_thang_DDD_L_LBI{index_thang}T0"))
        # ).click()



        # 4. Ch·ªçn th√°ng t·ª´ Combobox giao di·ªán ng∆∞·ªùi d√πng
        thang_chon = combo_thang.get()                     # V√≠ d·ª•: "Th√°ng 7"
        so_thang = int(thang_chon.split()[-1])             # L·∫•y s·ªë 7
        index_thang = so_thang - 1                         # Index = 6

        # --- Ki·ªÉm tra n·∫øu ƒë√£ ch·ªçn ƒë√∫ng th√°ng ---
        try:
            selected_thang = browser.find_element(By.ID, "cbx_thang_I").get_attribute("value")
            if str(so_thang) in selected_thang:
                print(f"‚úÖ Th√°ng {so_thang} ƒë√£ ƒë∆∞·ª£c ch·ªçn s·∫µn, b·ªè qua b∆∞·ªõc ch·ªçn.")
            else:
                # N·∫øu ch∆∞a ch·ªçn ƒë√∫ng th√¨ m·ªõi th·ª±c hi·ªán ch·ªçn
                WebDriverWait(browser, 10).until(
                    EC.element_to_be_clickable((By.ID, "cbx_thang_I"))
                ).click()

                # ƒê·ª£i dropdown hi·ªÉn th·ªã ·ªïn ƒë·ªãnh
                WebDriverWait(browser, 5).until(
                    EC.visibility_of_element_located((By.ID, f"cbx_thang_DDD_L_LBI{index_thang}T0"))
                )

                # Th·ª≠ click v√†i l·∫ßn n·∫øu l·∫ßn ƒë·∫ßu kh√¥ng hi·ªáu l·ª±c
                for _ in range(3):
                    try:
                        browser.find_element(By.ID, f"cbx_thang_DDD_L_LBI{index_thang}T0").click()
                        break
                    except Exception:
                        time.sleep(0.3)

                # X√°c nh·∫≠n l·∫°i th√°ng sau khi ch·ªçn (kh√¥ng b·∫Øt bu·ªôc)
                selected_again = browser.find_element(By.ID, "cbx_thang_I").get_attribute("value")
                if str(so_thang) not in selected_again:
                    print("‚ö†Ô∏è C·∫£nh b√°o: Th√°ng ch∆∞a ƒë∆∞·ª£c ch·ªçn ƒë√∫ng.")
        except Exception as e:
            ghi_log(f"‚ùå L·ªói khi ki·ªÉm tra/ch·ªçn th√°ng: {e}")



        # 5. B·∫•m n√∫t T√¨m ki·∫øm
        WebDriverWait(browser, 10).until(
            EC.element_to_be_clickable((By.ID, "bt_TimKiem"))
        ).click()

        # 6. L·∫•y k·∫øt qu·∫£ t·ªïng s·ªë h·ªì s∆°
        try:
            summary_element = WebDriverWait(browser, 15).until(
                EC.visibility_of_element_located((By.CLASS_NAME, "dxp-summary"))
            )
            summary_text = summary_element.text  # V√≠ d·ª•: "Page 1 of 18 (348 items)"

            match = re.search(r"\((\d+)\s+items\)", summary_text)
            count = int(match.group(1)) if match else 0

            # 7. G√°n bi·∫øn to√†n c·ª•c theo t√™n output_var_name
            globals()[output_var_name] = count

            # 8. Ghi log k·∫øt qu·∫£
            ghi_log(f"‚úÖ ƒê√£ t√¨m th·∫•y {count} h·ªì s∆° {ten_ho_so}")
            status_label.config(text=f"‚úÖ ƒê√£ t√¨m th·∫•y {count} h·ªì s∆° {ten_ho_so}", fg="green")

        except TimeoutException:
            ghi_log("‚ùå L·ªói t·∫£i trang, kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ sau 15s.")
            status_label.config(text="‚ùå L·ªói t·∫£i trang, kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ sau 15s", fg="red")
            btn_load_hs_trung.config(state="normal")
            btn_load_hs_7980.config(state="normal")
            return

    except Exception as e:
        status_label.config(text="‚ùå L·ªói t·∫£i trang", fg="red")
        ghi_log(f"‚ùå L·ªói t·∫£i trang: {e}")

    btn_load_hs_trung.config(state="normal")
    btn_load_hs_7980.config(state="normal")




# Load h·ªì s∆° tr√πng
def load_ho_so_trung():
    menu_ids = [
        "HeaderMenu_DXI2_T",         # üß≠ Menu c·∫•p 1: "H·ªì s∆° ƒë·ªÅ ngh·ªã thanh to√°n"
        "HeaderMenu_DXI2i0_T",       # üìÑ Menu c·∫•p 2: "H·ªì s∆° XML"
        "HeaderMenu_DXI2i0i2_T",     # üìã Menu c·∫•p 3: "Danh s√°ch ƒë·ªÅ ngh·ªã thanh to√°n"
    ]
    combobox_ids = [
        ("cb_TrangThaiHS_I", "cb_TrangThaiHS_DDD_L_LBI2T0"),  # ‚úÖ Tr·∫°ng th√°i h·ªì s∆°: "H·ªì s∆° tr√πng"
        ("cb_TrangThaiTT_I", "cb_TrangThaiTT_DDD_L_LBI0T0"),  # üí∞ Tr·∫°ng th√°i thanh to√°n: "T·∫•t c·∫£"
    ]
    lay_danh_sach_ho_so(menu_ids, combobox_ids, "so_ho_so_trung", "tr√πng")



# Load h·ªì s∆° 7980
def load_ho_so_7980():
    menu_ids = [
        "HeaderMenu_DXI2_T",         # üß≠ Menu c·∫•p 1: "H·ªì s∆° ƒë·ªÅ ngh·ªã thanh to√°n"
        "HeaderMenu_DXI2i1_T",       # üìÅ Menu c·∫•p 2: "H·ªì s∆° 7980"
        "HeaderMenu_DXI2i1i2_",     # üìã Menu c·∫•p 3: "Danh s√°ch ƒë·ªÅ ngh·ªã thanh to√°n 7980a"
    ]
    combobox_ids = [
        ("cb_TrangThaiHS_I", "cb_TrangThaiHS_DDD_L_LBI0T0"),  # ‚úÖ Tr·∫°ng th√°i h·ªì s∆°: "T·∫•t c·∫£"
        ("cb_TrangThaiTT_I", "cb_TrangThaiTT_DDD_L_LBI0T0"),  # üí∞ Tr·∫°ng th√°i thanh to√°n: "T·∫•t c·∫£"
    ]
    lay_danh_sach_ho_so(menu_ids, combobox_ids, "so_ho_so_7980", "79/80")








# X√≥a h·ªì s∆° tr√πng
def xoa_danh_sach_ho_so_trung():
    global dang_xoa_hs_trung

    def dem_so_ho_so_tren_trang():
        try:
            summary_element = WebDriverWait(browser, 5).until(
                EC.visibility_of_element_located((By.CLASS_NAME, "dxp-summary"))
            )
            summary_text = summary_element.text  # V√≠ d·ª•: "Page 1 of 18 (348 items)"
            match = re.search(r"\((\d+)\s+items\)", summary_text)
            return int(match.group(1)) if match else 0
        except:
            return -1  # Kh√¥ng c√≤n th·∫•y ph·∫ßn t·ª≠ n·ªØa

    if not dang_xoa_hs_trung:
        return

    def xoa_tiep():
        global dang_xoa_hs_trung

        if not dang_xoa_hs_trung:
            ghi_log("‚èπÔ∏è T·∫°m d·ª´ng")
            status_label.config(text="‚èπÔ∏è T·∫°m d·ª´ng", fg="red")
            btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")
            return

        current_count = dem_so_ho_so_tren_trang()

        if current_count == -1:
            # Cho ph√©p th·ª≠ ti·∫øp n·∫øu ch·ªâ m·∫•t t·∫°m th·ªùi
            current_count = 0

        if current_count == 0:
            ghi_log("‚úÖ Kh√¥ng t√¨m th·∫•y h·ªì s∆° tr√πng.")
            status_label.config(text="‚úÖ Kh√¥ng t√¨m th·∫•y h·ªì s∆° tr√πng.", fg="green")
            btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")
            dang_xoa_hs_trung = False
            return

        try:
            row = WebDriverWait(browser, 5).until(
                EC.presence_of_element_located((By.XPATH, "//tr[contains(@id, 'gvDanhSachHoSo_DXDataRow')]"))
            )
            cols = row.find_elements(By.TAG_NAME, "td")
            ho_ten = cols[8].text.strip() if len(cols) > 8 else "Kh√¥ng r√µ t√™n"
            icon_xoa = cols[26].find_element(By.TAG_NAME, "img")

            browser.execute_script("arguments[0].click();", icon_xoa)

            WebDriverWait(browser, 10).until(
                EC.visibility_of_element_located((By.ID, "PopupThongBaoXoa_PWH-1"))
            )
            btn_co = WebDriverWait(browser, 3).until(
                EC.element_to_be_clickable((By.ID, "btnCo"))
            )
            btn_co.click()

            # Theo d√µi s·ªë l∆∞·ª£ng thay ƒë·ªïi
            fail_count = 0
            for _ in range(20):  # t·ªëi ƒëa 10s
                time.sleep(0.5)
                new_count = dem_so_ho_so_tren_trang()

                print(f"[DEBUG] current_count = {current_count}, new_count = {new_count}")

                if new_count == -1:
                    fail_count += 1
                    if fail_count >= 3:
                        ghi_log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£ng k·∫øt qu·∫£ sau nhi·ªÅu l·∫ßn. D·ª´ng l·∫°i.")
                        status_label.config(text="‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y b·∫£ng k·∫øt qu·∫£ sau nhi·ªÅu l·∫ßn.", fg="red")
                        btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")
                        dang_xoa_hs_trung = False
                        return
                    continue  # th·ª≠ l·∫°i

                fail_count = 0  # reset n·∫øu b√¨nh th∆∞·ªùng

                if new_count < current_count:
                    print(f"[DEBUG] H·ªì s∆° gi·∫£m t·ª´ {current_count} ‚Üí {new_count}")
                    # ƒê√≥ng popup n·∫øu c√≥
                    try:
                        WebDriverWait(browser, 5).until(
                            EC.visibility_of_element_located((By.ID, "popup_message_PW-1"))
                        )
                        btn_close = WebDriverWait(browser, 3).until(
                            EC.element_to_be_clickable((By.ID, "popup_message_HCB-1"))
                        )
                        btn_close.click()
                    except:
                        pass

                    ghi_log(f"üóëÔ∏è ƒê√£ x√≥a h·ªì s∆°: {ho_ten}")
                    break
            else:
                ghi_log(f"‚ùå X√≥a h·ªì s∆° {ho_ten} th·∫•t b·∫°i (s·ªë l∆∞·ª£ng kh√¥ng ƒë·ªïi)")
                btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")
                dang_xoa_hs_trung = False
                return

        except Exception as e:
            ghi_log(f"‚ùå L·ªói khi x√≥a h·ªì s∆°: {e}")

        root.after(500, xoa_tiep)

    xoa_tiep()








def toggle_xoa_ho_so_trung():
    global dang_xoa_hs_trung

    if not dang_xoa_hs_trung:
        # B·∫Øt ƒë·∫ßu x√≥a
        dang_xoa_hs_trung = True
        btn_delete_hs_trung.config(text="‚èπÔ∏è D·ª´ng")
        xoa_danh_sach_ho_so_trung()
    else:
        # D·ª´ng thao t√°c x√≥a
        dang_xoa_hs_trung = False
        btn_delete_hs_trung.config(text="X√≥a HS Tr√πng")








# H√†m ƒë·ªÉ ch·ªçn file Excel
def chon_file_excel():
    global dong_test_hien_tai
    file_path = filedialog.askopenfilename(
        filetypes=[("Excel files", "*.xlsx *.xls")],
        title="Ch·ªçn file Excel"
    )
    if file_path:
        entry_file_path.delete(0, tk.END)
        entry_file_path.insert(0, file_path)
        dong_test_hien_tai = None  # Reset d√≤ng test
        ghi_log(f"üìÇ ƒê√£ ch·ªçn file: {file_path}")

# Test file excel
def test_in_thong_tin_excel():
    global dong_test_hien_tai

    ma_the_col = combo_mt.get().strip().upper()
    ho_ten_col = combo_ht.get().strip().upper()
    ngay_vao_col = combo_nv.get().strip().upper()
    ngay_ra_col = combo_nr.get().strip().upper()

    file_path = entry_file_path.get().strip()
    if not file_path:
        ghi_log("‚ùå Ch∆∞a ch·ªçn file Excel.")
        return

    try:
        wb = openpyxl.load_workbook(file_path)
        ws = wb.active
    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi m·ªü file Excel: {e}")
        return

    try:
        start = int(entry_start.get().strip())
        end = int(entry_end.get().strip())
    except ValueError:
        ghi_log("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n cho d√≤ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.")
        return

    if dong_test_hien_tai is None:
        dong_test_hien_tai = start

    if dong_test_hien_tai > end:
        ghi_log("‚úÖ ƒê√£ test ƒë·∫øn d√≤ng cu·ªëi c√πng.")
        return

    try:
        ma_the_val = ws[f"{ma_the_col}{dong_test_hien_tai}"].value
        ho_ten_val = ws[f"{ho_ten_col}{dong_test_hien_tai}"].value
        ngay_vao_val = ws[f"{ngay_vao_col}{dong_test_hien_tai}"].value
        ngay_ra_val = ws[f"{ngay_ra_col}{dong_test_hien_tai}"].value

        # G·ªôp th√¥ng tin th√†nh 1 d√≤ng log
        log_line = f"{dong_test_hien_tai}: {ma_the_val} | {ho_ten_val} | {ngay_vao_val} | {ngay_ra_val}"
        ghi_log(log_line)

    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi ƒë·ªçc d√≤ng {dong_test_hien_tai}: {e}")

    dong_test_hien_tai += 1


def mo_file_excel_7980():
    global ws_excel_7980

    file_path = entry_file_path.get().strip()
    if not file_path:
        ghi_log("‚ùå Ch∆∞a ch·ªçn file Excel.")
        return False

    try:
        wb = openpyxl.load_workbook(file_path)
        ws_excel_7980 = wb.active
        return True
    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi m·ªü file Excel: {e}")
        status_label.config(text="‚ùå L·ªói khi m·ªü file Excel", fg="red")
        return False

# Duy·ªát qua danh s√°ch excel, t√¨m ki·∫øm, so s√°nh v√† x√≥a h·ªì s∆° 7980
def xoa_ho_so_7980():
    global dong_hien_tai, dang_xoa_hs_7980

    if not dang_xoa_hs_7980:
        btn_delete_hs_7980.config(text="‚èπÔ∏è D·ª´ng x√≥a")
        ghi_log("üöÄ B·∫Øt ƒë·∫ßu x√≥a h·ªì s∆° 79/80...")
        status_label.config(text="üöÄ ƒêang x√≥a h·ªì s∆° 79/80...", fg="blue")
        dong_hien_tai = None
        dang_xoa_hs_7980 = True

        if mo_file_excel_7980():
            xoa_tiep_dong_7980()
        else:
            dang_xoa_hs_7980 = False
            btn_delete_hs_7980.config(text="X√≥a HS 79/80")
    else:
        dang_xoa_hs_7980 = False
        btn_delete_hs_7980.config(text="X√≥a HS 79/80")
        ghi_log("‚èπÔ∏è ƒê√£ d·ª´ng x√≥a.")
        status_label.config(text="‚èπÔ∏è ƒê√£ d·ª´ng x√≥a.", fg="red")



def xoa_tiep_dong_7980():
    import time
    global dong_hien_tai, dang_xoa_hs_7980

    if not dang_xoa_hs_7980:
        return

    # --- ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel ---
    file_path = entry_file_path.get().strip()
    if not file_path:
        ghi_log("‚ùå Ch∆∞a ch·ªçn file Excel.")
        status_label.config(text="‚ùå Ch∆∞a ch·ªçn file Excel.", fg="red")
        return

    try:
        wb = openpyxl.load_workbook(file_path)
        ws = wb.active
    except Exception as e:
        ghi_log(f"‚ùå L·ªói khi m·ªü file Excel: {e}")
        status_label.config(text="‚ùå L·ªói khi m·ªü file Excel", fg="red")
        return

    try:
        start = int(entry_start.get().strip())
        end = int(entry_end.get().strip())
    except ValueError:
        ghi_log("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n cho d√≤ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.")
        status_label.config(text="‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë nguy√™n cho d√≤ng b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c.", fg="red")
        return

    if dong_hien_tai is None:
        dong_hien_tai = start

    if dong_hien_tai > end:
        ghi_log("‚úÖ ƒê√£ duy·ªát h·∫øt t·∫•t c·∫£ c√°c d√≤ng.")
        status_label.config(text="‚úÖ ƒê√£ duy·ªát h·∫øt t·∫•t c·∫£ c√°c d√≤ng.", fg="blue")
        btn_delete_hs_7980.config(text="X√≥a HS 79/80")
        dang_xoa_hs_7980 = False
        return

    try:
        # --- H√†m ph·ª• ƒë·∫øm s·ªë d√≤ng k·∫øt qu·∫£ ---
        def dem_so_dong_ket_qua():
            return len(browser.find_elements(By.XPATH, "//tr[starts-with(@id, 'gvDanhSachBHYT7980_DXDataRow')]"))

        # --- L·∫•y d·ªØ li·ªáu t·ª´ d√≤ng hi·ªán t·∫°i ---
        ma_the_col = combo_mt.get().strip().upper()
        ho_ten_col = combo_ht.get().strip().upper()
        ngay_vao_col = combo_nv.get().strip().upper()
        ngay_ra_col = combo_nr.get().strip().upper()

        ma_the_val = ws[f"{ma_the_col}{dong_hien_tai}"].value
        ho_ten_val = str(ws[f"{ho_ten_col}{dong_hien_tai}"].value).strip()
        ngay_vao_val = str(ws[f"{ngay_vao_col}{dong_hien_tai}"].value).strip()
        ngay_ra_val = str(ws[f"{ngay_ra_col}{dong_hien_tai}"].value).strip()

        if not ma_the_val:
            ghi_log(f"{dong_hien_tai}: ‚ö†Ô∏è Kh√¥ng c√≥ m√£ th·∫ª. B·ªè qua.")
            dong_hien_tai += 1
            root.after(500, xoa_tiep_dong_7980)
            return

        # --- T√¨m l·∫°i input m·ªói l·∫ßn ƒë·ªÉ tr√°nh stale element ---
        input_box = WebDriverWait(browser, 5).until(
            EC.presence_of_element_located((By.ID, "gvDanhSachBHYT7980_DXFREditorcol3_I"))
        )

        input_val = input_box.get_attribute("value").strip()

        if input_val:
            input_box.clear()

            # --- Ch·ªù s·ªë d√≤ng thay ƒë·ªïi sau khi clear ---
            old_count = dem_so_dong_ket_qua()
            start_time = time.time()
            while time.time() - start_time < 30:
                new_count = dem_so_dong_ket_qua()
                if new_count != old_count:
                    print(f"ƒê√£ l·ªçc th√†nh c√¥ng {new_count} k·∫øt qu·∫£")
                    break
                time.sleep(0.5)
            else:
                ghi_log("‚ùå L·ªói t·∫£i trang, kh√¥ng l·ªçc ƒë∆∞·ª£c k·∫øt qu·∫£")
                btn_delete_hs_7980.config(text="X√≥a HS 79/80")
                dang_xoa_hs_7980 = False
                return

            # --- T√¨m l·∫°i input box sau khi reload ---
            input_box = WebDriverWait(browser, 5).until(
                EC.presence_of_element_located((By.ID, "gvDanhSachBHYT7980_DXFREditorcol3_I"))
            )

        # --- Nh·∫≠p m√£ th·∫ª ---
        input_box.send_keys(str(ma_the_val))

        # --- Ch·ªù s·ªë d√≤ng thay ƒë·ªïi sau khi nh·∫≠p m√£ th·∫ª ---
        old_count = dem_so_dong_ket_qua()
        start_time = time.time()
        while time.time() - start_time < 10:
            new_count = dem_so_dong_ket_qua()
            if new_count != old_count:
                print(f"ƒê√£ l·ªçc th√†nh c√¥ng {new_count} k·∫øt qu·∫£")
                break
            time.sleep(0.5)
        else:
            ghi_log("‚ùå L·ªói t·∫£i trang, kh√¥ng l·ªçc ƒë∆∞·ª£c k·∫øt qu·∫£")
            btn_delete_hs_7980.config(text="X√≥a HS 79/80")
            dang_xoa_hs_7980 = False
            return

        # --- T√¨m danh s√°ch k·∫øt qu·∫£ ---
        rows = browser.find_elements(By.XPATH, "//tr[starts-with(@id, 'gvDanhSachBHYT7980_DXDataRow')]")
        found = False

        for row in rows:
            cols = row.find_elements(By.TAG_NAME, "td")
            if len(cols) >= 19:
                ho_ten = cols[5].text.strip()
                ngay_vao = cols[8].text.strip().replace(" SA", "").replace(" CH", "")
                ngay_ra = cols[9].text.strip().replace(" SA", "").replace(" CH", "")

                if ho_ten == ho_ten_val and ngay_vao == ngay_vao_val and ngay_ra == ngay_ra_val:
                    try:
                        cols = row.find_elements(By.TAG_NAME, "td")
                        delete_btn = cols[18].find_element(By.TAG_NAME, "input")

                        browser.execute_script("arguments[0].click();", delete_btn)

                        # ‚è≥ Ch·ªù popup x√°c nh·∫≠n x√≥a hi·ªán ra
                        WebDriverWait(browser, 5).until(
                            EC.visibility_of_element_located((By.ID, "PopupThongBaoXoa_PWH-1"))
                        )

                        # ‚úÖ B·∫•m n√∫t "C√≥"
                        btn_co = WebDriverWait(browser, 3).until(
                            EC.element_to_be_clickable((By.ID, "btnCo_CD"))
                        )
                        btn_co.click()

                        # ‚è≥ Ch·ªù popup th√¥ng b√°o k·∫øt qu·∫£ x√≥a (c√≥ th·ªÉ xu·∫•t hi·ªán)
                        try:
                            WebDriverWait(browser, 5).until(
                                EC.visibility_of_element_located((By.ID, "popup_message_PWH-1"))
                            )
                            # ‚úÖ B·∫•m n√∫t Close ƒë·ªÉ ƒë√≥ng popup
                            btn_close = WebDriverWait(browser, 3).until(
                                EC.element_to_be_clickable((By.ID, "popup_message_HCB-1"))
                            )
                            btn_close.click()
                        except:
                            ghi_log(f"{dong_hien_tai}: ‚ùå x√≥a {ho_ten} th·∫•t b·∫°i (kh√¥ng th·∫•y popup x√°c nh·∫≠n)")
                            dang_xoa_hs_7980 = False
                            btn_delete_hs_7980.config(text="X√≥a HS 79/80")
                            return

                        ghi_log(f"{dong_hien_tai}: üóëÔ∏è ƒê√£ x√≥a: {ho_ten}")
                        found = True
                        break

                    except Exception as e:
                        ghi_log(f"{dong_hien_tai}: ‚ùå Kh√¥ng th·ªÉ x√≥a: {e}")


        if not found:
            ghi_log(f"{dong_hien_tai}: ‚ùå Kh√¥ng t√¨m th·∫•y h·ªì s∆° c·ªßa {ho_ten}")

    except Exception as e:
        ghi_log(f"{dong_hien_tai}: ‚ùå L·ªói: {e}")

    dong_hien_tai += 1
    root.after(500, xoa_tiep_dong_7980)






# C·ª≠a s·ªï C√†i ƒë·∫∑t: ƒê√£ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ hi·ªÉn th·ªã ch√≠nh gi·ªØa c·ª≠a s·ªï cha v√† kh√¥ng b·ªã nh√°y 2 l·∫ßn
def mo_cai_dat():
    # --- T√≠nh to√°n v·ªã tr√≠ tr∆∞·ªõc ---
    w, h = 300, 250
    root.update_idletasks()
    root_x = root.winfo_rootx()
    root_y = root.winfo_rooty()
    root_w = root.winfo_width()
    root_h = root.winfo_height()
    x = root_x + (root_w // 2) - (w // 2)
    y = root_y + (root_h // 2) - (h // 2)

    # --- D√πng after ƒë·ªÉ tr√°nh nh√°y ---
    def tao_cua_so():
        win = tk.Toplevel()
        win.withdraw()  # ‚úÖ ·∫®n ngay sau khi t·∫°o ƒë·ªÉ tr√°nh nh√°y
        win.title("C√†i ƒë·∫∑t ƒëƒÉng nh·∫≠p")
        win.iconbitmap(resource_path("icon.ico"))  # ‚úÖ Icon c·ª≠a s·ªï
        win.geometry(f"{w}x{h}+{x}+{y}")
        win.resizable(False, False)
        win.transient(root)
        win.grab_set()

        # --- Giao di·ªán ---
        tk.Label(win, text="M√£ c∆° s·ªü KCB:", font=("Arial", 10)).pack(pady=(10, 0))
        entry_ma_cs = tk.Entry(win, font=("Arial", 10), justify="center")
        entry_ma_cs.pack()

        tk.Label(win, text="T√™n ƒëƒÉng nh·∫≠p:", font=("Arial", 10)).pack(pady=(10, 0))
        entry_username = tk.Entry(win, font=("Arial", 10), justify="center")
        entry_username.pack()

        tk.Label(win, text="M·∫≠t kh·∫©u:", font=("Arial", 10)).pack(pady=(10, 0))
        entry_password = tk.Entry(win, font=("Arial", 10), justify="center")
        entry_password.pack()

        # --- ƒê·ªçc d·ªØ li·ªáu t·ª´ CSV ---
        filepath = get_login_file_path()
        if os.path.exists(filepath):
            with open(filepath, "r", encoding="utf-8") as f:
                reader = csv.DictReader(f)
                for row in reader:
                    entry_ma_cs.insert(0, row.get("ma_co_so", ""))
                    entry_username.insert(0, row.get("ten_dang_nhap", ""))
                    entry_password.insert(0, row.get("mat_khau", ""))
                    break

        # --- L∆∞u ---
        def luu():
            ma_cs = entry_ma_cs.get().strip()
            username = entry_username.get().strip()
            password = entry_password.get().strip()

            if not ma_cs or not username or not password:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß.")
                return

            with open(filepath, "w", newline="", encoding="utf-8") as f:
                writer = csv.DictWriter(f, fieldnames=["ma_co_so", "ten_dang_nhap", "mat_khau"])
                writer.writeheader()
                writer.writerow({
                    "ma_co_so": ma_cs,
                    "ten_dang_nhap": username,
                    "mat_khau": password
                })

            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ l∆∞u.")
            win.destroy()

        tk.Button(win, text="L∆∞u", font=("Arial", 10), width=10, command=luu).pack(pady=20)
        
        # --- Footer ---
        tk.Label(win, text="07/2025 - buitiencong@gmail.com", font=("Arial", 8), fg="gray").pack(side="bottom", pady=(5, 5))

        win.deiconify()  # ‚úÖ Hi·ªÉn th·ªã l·∫°i sau khi setup xong

    root.after(1, tao_cua_so)






























# === ƒêƒÉng nh·∫≠p + Combobox th√°ng ===
# --- D√≤ng ch·ª©a n√∫t ƒêƒÉng nh·∫≠p (gi·ªØa) v√† C√†i ƒë·∫∑t (ph·∫£i) ---
top_button_frame = tk.Frame(root)
top_button_frame.pack(fill="x", pady=10, padx=10)

# D√πng l∆∞·ªõi 3 c·ªôt: spacer tr√°i - n√∫t ƒëƒÉng nh·∫≠p - spacer ph·∫£i
top_button_frame.columnconfigure(0, weight=1)
top_button_frame.columnconfigure(1, weight=0)
top_button_frame.columnconfigure(2, weight=1)

btn_login = tk.Button(top_button_frame, text="ƒêƒÉng nh·∫≠p c·ªïng b·∫£o hi·ªÉm", font=("Arial", 12), command=mo_chrome)
btn_login.grid(row=0, column=1)

# N√∫t "C√†i ƒë·∫∑t" cƒÉn s√°t ph·∫£i b·∫±ng place
btn_caidat = tk.Button(top_button_frame, text="‚öôÔ∏è", font=("Arial", 12), command=mo_cai_dat)
btn_caidat.place(relx=1.0, x=0, y=0, anchor="ne")



thang_hien_tai = datetime.datetime.now().month
index_mac_dinh = thang_hien_tai - 1

selected_thang = tk.StringVar()
combo_thang = ttk.Combobox(root, textvariable=selected_thang, font=("Arial", 11), width=10, state="readonly")
combo_thang['values'] = [f"Th√°ng {i}" for i in range(1, 13)]
combo_thang.current(index_mac_dinh)
combo_thang.pack(pady=5)

# === Notebook ch·ª©a 2 tab ===
style = ttk.Style()
style.configure("TNotebook.Tab", font=("Arial", 11), padding=[10, 5])  # Font m·∫∑c ƒë·ªãnh
style.map("TNotebook.Tab",
    font=[("selected", ("Arial", 12, "bold"))],         # In ƒë·∫≠m khi ƒë∆∞·ª£c ch·ªçn
    foreground=[("selected", "red")]                    # M√†u ch·ªØ ƒë·ªè khi ƒë∆∞·ª£c ch·ªçn
)

# üëâ B·ªçc Notebook b·∫±ng Frame c√≥ padding tr√°i/ph·∫£i
notebook_frame = tk.Frame(root)
notebook_frame.pack(padx=10, pady=10, fill="x")  # b·ªè expand ƒë·ªÉ kh√¥ng b·ªã k√©o d√£n theo Text box

# üëâ Notebook c√≥ chi·ªÅu cao thay ƒë·ªïi ƒë∆∞·ª£c
notebook = ttk.Notebook(notebook_frame, height=300)  # height m·∫∑c ƒë·ªãnh ban ƒë·∫ßu
notebook.pack(fill="x")

# === Tab 1: H·ªì s∆° tr√πng ===
tab_hs_trung = tk.Frame(notebook)
notebook.add(tab_hs_trung, text="H·ªì s∆° tr√πng")

frame_buttons = tk.Frame(tab_hs_trung)  # üëâ Frame ch·ª©a c√°c button, cƒÉn gi·ªØa theo c·∫£ 2 chi·ªÅu
frame_buttons.pack(expand=True)

btn_load_hs_trung = tk.Button(frame_buttons, text="Load h·ªì s∆° tr√πng", font=("Arial", 12), command=load_ho_so_trung)
btn_load_hs_trung.pack(pady=10)

btn_delete_hs_trung = tk.Button(frame_buttons, text="X√≥a h·ªì s∆° tr√πng", font=("Arial", 12), command=toggle_xoa_ho_so_trung)
btn_delete_hs_trung.pack(pady=10)

# === Tab 2: H·ªì s∆° 79/80 ===
tab_hs_7980 = tk.Frame(notebook)
notebook.add(tab_hs_7980, text="H·ªì s∆° 79/80")

btn_load_hs_7980 = tk.Button(tab_hs_7980, text="Load h·ªì s∆° 79/80", font=("Arial", 12), command=load_ho_so_7980)
btn_load_hs_7980.pack(pady=10)

# === S·ª± ki·ªán thay ƒë·ªïi chi·ªÅu cao theo tab ===
def on_tab_change(event):
    status_label.config(text="", fg="black")

    selected_tab = event.widget.select()
    tab_text = notebook.tab(selected_tab, "text")

    if tab_text == "H·ªì s∆° tr√πng":
        notebook.configure(height=120)
    elif tab_text == "H·ªì s∆° 79/80":
        notebook.configure(height=200)

notebook.bind("<<NotebookTabChanged>>", on_tab_change)


# --- D√≤ng ch·ªçn file Excel ---
def set_placeholder(entry, text):
    entry.insert(0, text)
    entry.config(fg='gray')

    def on_focus_in(event):
        if entry.get() == text:
            entry.delete(0, tk.END)
            entry.config(fg='black')

    def on_focus_out(event):
        if not entry.get():
            entry.insert(0, text)
            entry.config(fg='gray')

    entry.bind("<FocusIn>", on_focus_in)
    entry.bind("<FocusOut>", on_focus_out)

def chon_file_excel():
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
    if file_path:
        if entry_file_path.get() == "Ch·ªçn file excel ƒë·ªëi chi·∫øu":
            entry_file_path.delete(0, tk.END)
            entry_file_path.config(fg='black')
        entry_file_path.delete(0, tk.END)
        entry_file_path.insert(0, file_path)

file_select_frame = tk.Frame(tab_hs_7980)
file_select_frame.pack(pady=5)

entry_file_path = tk.Entry(file_select_frame, width=30, font=("Arial", 10))
entry_file_path.pack(side="left", padx=5)
set_placeholder(entry_file_path, "Ch·ªçn file excel ƒë·ªëi chi·∫øu")

btn_browse_file = tk.Button(file_select_frame, text="Ch·ªçn file", command=chon_file_excel)
btn_browse_file.pack(side="left")

# --- D√≤ng ch·ªçn c·ªôt ---
chu_cai_list = [chr(i) for i in range(65, 91)]

column_select_frame = tk.Frame(tab_hs_7980)
column_select_frame.pack(pady=5)

label_mt = tk.Label(column_select_frame, text="M√£ th·∫ª")
label_mt.pack(side="left", padx=2)
combo_mt = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_mt.pack(side="left", padx=2)

label_ht = tk.Label(column_select_frame, text="H·ªç t√™n")
label_ht.pack(side="left", padx=2)
combo_ht = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_ht.pack(side="left", padx=2)

label_nv = tk.Label(column_select_frame, text="Ng√†y v√†o")
label_nv.pack(side="left", padx=2)
combo_nv = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_nv.pack(side="left", padx=2)

label_nr = tk.Label(column_select_frame, text="Ng√†y ra")
label_nr.pack(side="left", padx=2)
combo_nr = ttk.Combobox(column_select_frame, values=chu_cai_list, width=3)
combo_nr.pack(side="left", padx=2)

# --- D√≤ng nh·∫≠p d√≤ng b·∫Øt ƒë·∫ßu/k·∫øt th√∫c ---
row_range_frame = tk.Frame(tab_hs_7980)
row_range_frame.pack(pady=5)

label_start = tk.Label(row_range_frame, text="D√≤ng b·∫Øt ƒë·∫ßu")
label_start.pack(side="left", padx=2)
entry_start = tk.Entry(row_range_frame, width=6)
entry_start.pack(side="left", padx=2)

label_end = tk.Label(row_range_frame, text="D√≤ng k·∫øt th√∫c")
label_end.pack(side="left", padx=2)
entry_end = tk.Entry(row_range_frame, width=6)
entry_end.pack(side="left", padx=2)

btn_test_range = tk.Button(row_range_frame, text="Test", command=test_in_thong_tin_excel)
btn_test_range.pack(side="left", padx=5)

btn_delete_hs_7980 = tk.Button(tab_hs_7980, text="X√≥a h·ªì s∆° 79/80", font=("Arial", 12), command=xoa_ho_so_7980)
btn_delete_hs_7980.pack(pady=5)

# === Status v√† TextBox ===
status_label = tk.Label(root, text="", font=("Arial", 10))
status_label.pack()

text_box = tk.Text(root, height=25, font=("Arial", 10))
text_box.pack(padx=10, pady=10, fill="both")
text_box.config(state='disabled')

root.mainloop()
